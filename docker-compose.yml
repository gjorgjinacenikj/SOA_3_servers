version: '3.3'

services:

  consul:
    container_name: consul
    image: consul
    ports:
      - "8300:8300"
      - "8400:8400"
      - "8500:8500"
    restart: always

  registrator:
    container_name: registrator
    image: gliderlabs/registrator:master
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock"
    command: consul://consul:8500
    restart: always
    depends_on:
      - consul

  products_db:
    container_name: products_db
    image: postgres:latest
    volumes:
      - postgres_data_products:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=products_database

    restart: on-failure

  products:
    container_name: products
    build: ./products
    #command: uvicorn products-app.products_main:app --reload --host 0.0.0.0 --port 7001
    volumes:
      - ./products/:/app/
    ports:
      - 7001:7001
    environment:
      - products_ip=products
      - orders_ip=orders
      - reviews_ip=reviews
      - consul_ip=consul
      - products_port=7001
      - orders_port=7002
      - reviews_port=7003
      - consul_port=8500
      - DATABASE_URI=postgresql://postgres:password@products_db/products_database
    depends_on:
      - products_db
      - registrator


  orders_db:
    container_name: orders_db
    image: postgres:latest
    volumes:
      - postgres_data_orders:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=orders_database

    restart: on-failure

  orders:
    container_name: orders
    build: ./orders
    #command: uvicorn orders-app.orders_main:app --reload --host 0.0.0.0 --port 7002
    volumes:
      - ./orders/:/app/
    ports:
      - 7002:7002
    environment:
      - DATABASE_URI=postgresql://postgres:password@orders_db/orders_database
      - products_ip=products
      - orders_ip=orders
      - reviews_ip=reviews
      - consul_ip=consul
      - products_port=7001
      - orders_port=7002
      - reviews_port=7003
      - consul_port=8500
    depends_on:
      - orders_db
      - registrator
      - products


  reviews_db:
    container_name: reviews_db
    image: postgres:latest
    volumes:
      - postgres_data_reviews:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=reviews_database

    restart: on-failure


  reviews:
    container_name: reviews
    build: ./reviews
    #command: uvicorn reviews-app.reviews_main:app --reload --host 0.0.0.0 --port 7003
    volumes:
      - ./reviews/:/app/
    ports:
      - 7003:7003
    environment:
      - DATABASE_URI=postgresql://postgres:password@reviews_db/reviews_database
      - products_ip=products
      - orders_ip=orders
      - reviews_ip=reviews
      - consul_ip=registrator
      - products_port=7001
      - orders_port=7002
      - reviews_port=7003
      - consul_port=8500
    depends_on:
      - reviews_db
      - registrator
      - orders


  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.14.0
    volumes:
      - ./prometheus/:/etc/prometheus/
    command: --config.file=/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090

  grafana:
    container_name: grafana
    image: grafana/grafana:6.5.2
    ports:
      - 3000:3000
    depends_on:
      - prometheus

  kong-db:
    container_name: kong-db
    image: postgres:11-alpine
    environment:
      POSTGRES_DB:       kong_database
      POSTGRES_USER:     postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    restart: on-failure

  kong:
    container_name: kong
    image: kong:latest
    depends_on:
      - kong-db
    entrypoint: sh -c "sleep 10 && kong migrations bootstrap -v"

    ports:
      - "8000:8000" # Listener
      - "8001:8001" # Admin API
    #      - "8443:8443" # Listener  (SSL)
    #      - "8444:8444" # Admin API (SSL)
    environment:

      KONG_DATABASE:         postgres
      KONG_PG_HOST:          kong-db
      KONG_PG_PORT:          5432
      KONG_PG_USER:          postgres
      KONG_PG_PASSWORD:      password
      KONG_PG_DATABASE:      kong_database
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG:  /dev/stderr
      KONG_ADMIN_ERROR_LOG:  /dev/stderr
      KONG_PROXY_LISTEN:     0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_ADMIN_LISTEN:     0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PLUGINS:          bundled,oidc,cookies-to-headers
      KONG_LOG_LEVEL:        debug
    restart: on-failure

  konga:
    container_name: konga
    image: pantsel/konga:0.14.7
    depends_on:
      - kong
    ports:
      - "1337:1337"
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-db
      DB_PORT: '5432'
      DB_USER: postgres
      DB_DATABASE: kong_database
      NODE_ENV: development
    restart: on-failure

  keycloak-db:
    container_name: keycloak-db
    image: postgres:11-alpine
    environment:
      POSTGRES_DB:       keycloak_database
      POSTGRES_USER:     postgres
      POSTGRES_PASSWORD: password
    restart: always

  keycloak:
    image: jboss/keycloak:8.0.1
    depends_on:
      - keycloak-db
    ports:
      - "8180:8080"
      - "9990:9990"
    environment:
      DB_VENDOR:   POSTGRES
      DB_ADDR:     keycloak-db
      DB_PORT:     5432
      DB_DATABASE: keycloak_database
      DB_USER:     postgres
      DB_PASSWORD: password
      KEYCLOAK_USER:     admin
      KEYCLOAK_PASSWORD: password
    restart: on-failure

volumes:
  postgres_data_products:
  postgres_data_orders:
  postgres_data_reviews: