version: '3.3'

services:

  consul:
    container_name: consul
    image: consul
    ports:
      - "8300:8300"
      - "8400:8400"
      - "8500:8500"
    restart: always

  registrator:
    container_name: registrator
    image: gliderlabs/registrator:master
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock"
    command: consul://consul:8500
    restart: always
    depends_on:
      - consul

  products_db:
    container_name: products_db
    image: postgres:latest
    volumes:
      - postgres_data_products:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=products_database

    restart: on-failure

  products:
    container_name: products
    build: ./products
    volumes:
      - ./products/:/app/
    ports:
      - 7001:7001
    environment:
      - products_ip=products
      - orders_ip=orders
      - reviews_ip=reviews
      - consul_ip=consul
      - products_port=7001
      - orders_port=7002
      - reviews_port=7003
      - consul_port=8500
      - DATABASE_URI=postgresql://postgres:password@products_db/products_database
    depends_on:
      - products_db



  orders_db:
    container_name: orders_db
    image: postgres:latest
    volumes:
      - postgres_data_orders:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=orders_database

    restart: on-failure

  orders:
    container_name: orders
    build: ./orders
    volumes:
      - ./orders/:/app/
    ports:
      - 7002:7002
    environment:
      - DATABASE_URI=postgresql://postgres:password@orders_db/orders_database
      - products_ip=products
      - orders_ip=orders
      - reviews_ip=reviews
      - consul_ip=consul
      - products_port=7001
      - orders_port=7002
      - reviews_port=7003
      - consul_port=8500
    depends_on:
      - orders_db
      - products


  reviews_db:
    container_name: reviews_db
    image: postgres:latest
    volumes:
      - postgres_data_reviews:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=reviews_database

    restart: on-failure


  reviews:
    container_name: reviews
    build: ./reviews
    volumes:
      - ./reviews/:/app/
    ports:
      - 7003:7003
    environment:
      - DATABASE_URI=postgresql://postgres:password@reviews_db/reviews_database
      - products_ip=products
      - orders_ip=orders
      - reviews_ip=reviews
      - consul_ip=registrator
      - products_port=7001
      - orders_port=7002
      - reviews_port=7003
      - consul_port=8500
    depends_on:
      - reviews_db
      - orders


  configurer:
    container_name: configurer
    build: ./configurer
    volumes:
      - ./configurer/:/app/
    ports:
      - 7000:7000
    environment:
      - products_ip=products
      - orders_ip=orders
      - reviews_ip=reviews
      - consul_ip=registrator
      - products_port=7001
      - orders_port=7002
      - reviews_port=7003
      - consul_port=8500
      - kong_ip=kong
      - kong_port=8001
      - configurer_port=7000
    depends_on:
      - kong

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.14.0
    volumes:
      - ./prometheus/:/etc/prometheus/
    command: --config.file=/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090

  grafana:
    container_name: grafana
    #image: grafana/grafana:6.5.2
    build: './grafana'
    ports:
      - 3000:3000
    depends_on:
      - prometheus

  kong-database:
    image: postgres:9.6.11-alpine
    container_name: kong-database
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_HOST_AUTH_METHOD: trust

    healthcheck:
      test: pg_isready -U kong && psql -d kong -U kong -c "SELECT 1=1"
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migration:
    image: kong:1.0.0rc3-alpine
    container_name: kong-migration
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    command: sh -c "(kong migrations up || kong migrations bootstrap) && touch migrations_run && sleep 30"
    healthcheck:
      test: "if [[ -f migrations_run ]] ; then exit 0; else exit 1; fi"
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  kong:
    image: kong:1.0.0rc3-alpine
    container_name: kong
    depends_on:
      - kong-database
      - kong-migration
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - 8000:8000
      - 8001:8001
      - 8444:8443
    healthcheck:
      test: kong health
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always


  konga:
    container_name: konga
    image: pantsel/konga:0.14.1
    depends_on:
      - kong
    ports:
      - "1337:1337"
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_PORT: 5432
      DB_USER: kong
      DB_DATABASE: kong
      NODE_ENV: development
    restart: on-failure


volumes:
  postgres_data_products:
  postgres_data_orders:
  postgres_data_reviews: